--------------------------------------------------------------------------------
Profile data file 'callgrind.out.2901' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 74731065
Trigger: Program termination
Profiled target:  ./a.out (PID 2901, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,041,054,121 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
999,502,199 (96.01%)  ./string/../sysdeps/x86_64/multiarch/../rawmemchr.S:__rawmemchr_sse2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
 21,521,255 ( 2.07%)  ./stdio-common/./stdio-common/vfscanf-internal.c:__vfscanf_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
  2,322,180 ( 0.22%)  src/hash_table/hash_table.cpp:hashFuncCRC32(char*, unsigned long) [/root/HashTable/a.out]
  2,279,981 ( 0.22%)  ./libio/./libio/genops.c:_IO_sputbackc [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,920,048 ( 0.18%)  ./libio/./libio/strops.c:_IO_str_init_static_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,637,681 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S:__strcmp_sse2_unaligned [/usr/lib/x86_64-linux-gnu/libc.so.6]
  1,606,734 ( 0.15%)  src/hash_table/hash_table.cpp:isInserted(char*, ListStr*, ListsArrays*) [/root/HashTable/a.out]

--------------------------------------------------------------------------------
-- Auto-annotated source: src/hash_table/hash_table.cpp
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #include "../../../MyLibraries/headers/file_func.h"
        .           #include "../../../MyLibraries/headers/systemdata.h"
        .           #include <stdlib.h>
        .           #include <stdint.h>
        .           
        .           #define HASH_TABLE_HEAD table->lists[insert_index].head
        .           #define HASH_TABLE_TAIL table->lists[insert_index].tail
        .           
        6 ( 0.00%)  int hashTableStrCtor(HashTableStr *table, size_t (*hashFunc)(char *, size_t)) {
        .           
        3 ( 0.00%)      assert(table);
        2 ( 0.00%)      assert(*hashFunc);
        .           
        7 ( 0.00%)      if (listsArraysCtor(&table->arrays) != SUCCESS)
    3,545 ( 0.00%)  => /root/HashTable/src/hash_table/string_list.cpp:listsArraysCtor(ListsArrays*) (1x)
        .                   return ERROR;
        .           
        4 ( 0.00%)      table->lists = (ListStr *) calloc (HASH_TABLE_SIZE, sizeof(ListStr));
    5,503 ( 0.00%)  => ???:0x00000000004011c0 (1x)
        2 ( 0.00%)      if (!table->lists) {
        .                   listsArraysDtor(&table->arrays);
        .                   return NO_MEMORY;
        .               }
        .           
        2 ( 0.00%)      table->size = HASH_TABLE_SIZE;
        .               table->num_of_elements = 0;
        1 ( 0.00%)      table->hashFunc = hashFunc;
        .           
        .               return SUCCESS;
        7 ( 0.00%)  }
        .           
        2 ( 0.00%)  void hashTableStrDtor(HashTableStr *table) {
        .           
        3 ( 0.00%)      assert(table);
        .           
        2 ( 0.00%)      listsArraysDtor(&table->arrays);
1,054,690 ( 0.10%)  => /root/HashTable/src/hash_table/string_list.cpp:listsArraysDtor(ListsArrays*) (1x)
        2 ( 0.00%)      free(table->lists);
      134 ( 0.00%)  => ???:0x0000000000401140 (1x)
        1 ( 0.00%)      table->lists = NULL;
        .           
        2 ( 0.00%)      table->size = 0;
        .               table->num_of_elements = 0;
        2 ( 0.00%)  }
        .           
       12 ( 0.00%)  int loadHashTable(HashTableStr *table, const char *filename) {
        .           
        3 ( 0.00%)      assert(table);
        2 ( 0.00%)      assert(filename);
        .           
        2 ( 0.00%)      char *buf = readFileToBuffer(filename);
    6,266 ( 0.00%)  => ???:readFileToBuffer(char const*) (1x)
        3 ( 0.00%)      if (!buf)   return ERROR;
        .               char *tmp = buf;
        .           
        4 ( 0.00%)      char word_buf[MAX_WORD_LEN] = "";
        .           
        1 ( 0.00%)      int sym_read = 0;
  360,009 ( 0.03%)      while (sscanf(tmp, "%s %n", word_buf, &sym_read) == 1) {
1,031,184,546 (99.05%)  => ???:0x0000000000401200 (40,001x)
  200,000 ( 0.02%)          tmp += sym_read;
        .                   if (hashTableStrInsert(table, word_buf) != SUCCESS)
        .                       return ERROR;
        .               }
        .           
        2 ( 0.00%)      free(buf);
      703 ( 0.00%)  => ???:0x0000000000401140 (1x)
        .           
        2 ( 0.00%)      return SUCCESS;
       12 ( 0.00%)  }
        .           
        .           int hashTableStrInsert(HashTableStr *table, char *str) {
        .           
        .               assert(table);
        .               assert(str);
        .           
  120,000 ( 0.01%)      size_t insert_index = table->hashFunc(str, HASH_TABLE_SIZE);
2,322,180 ( 0.22%)  => src/hash_table/hash_table.cpp:hashFuncCRC32(char*, unsigned long) (40,000x)
   80,000 ( 0.01%)      if (insert_index >= table->size) {
        .                   printf(RED "hash_table error: " END_OF_COLOR "incorrect insert_index received\n");
        .                   return ERROR;
        .               }
        .           
  360,004 ( 0.03%)      if (isInserted(str, &table->lists[insert_index], &table->arrays)) return SUCCESS;
3,354,873 ( 0.32%)  => src/hash_table/hash_table.cpp:isInserted(char*, ListStr*, ListsArrays*) (40,000x)
        .           
   36,470 ( 0.00%)      if (listStrInsertAfter(&table->lists[insert_index], str, HASH_TABLE_TAIL, &table->arrays) != SUCCESS)
1,831,799 ( 0.18%)  => /root/HashTable/src/hash_table/string_list.cpp:listStrInsertAfter(ListStr*, char*, unsigned long, ListsArrays*) (5,210x)
        .                   return ERROR;
        .           
        .               return SUCCESS;
        .           }
        .           
  320,000 ( 0.03%)  bool isInserted(char *str, ListStr *lst, ListsArrays *arrays) {
        .           
  120,000 ( 0.01%)      assert(str);
  120,000 ( 0.01%)      assert(lst);
   80,000 ( 0.01%)      assert(arrays);
        .           
   40,000 ( 0.00%)      size_t cur_index = lst->head;
  207,066 ( 0.02%)      if (!arrays->data[cur_index])   return false;
        .           
        .               while (true) {
  325,980 ( 0.03%)          if (strcmp(arrays->data[cur_index], str) == 0)  return true;
1,748,139 ( 0.17%)  => ???:0x00000000004011d0 (54,889x)
   40,198 ( 0.00%)          if (cur_index == lst->tail) break;
   33,490 ( 0.00%)          cur_index = arrays->next[cur_index];
        .               }
        .           
        .               return false;
  320,000 ( 0.03%)  }
        .           
        .           size_t hashFuncZero(char *str, size_t size) {
        .           
        .               assert(str);
        .           
        .               return 0 % size;
        .           }
        .           
-- line 112 ----------------------------------------
-- line 248 ----------------------------------------
        .             0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
        .             0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,
        .             0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
        .             0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
        .             0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
        .           };
        .           
        .           // credit from https://en.wikipedia.org/wiki/Computation_of_cyclic_redundancy_checks
   40,000 ( 0.00%)  size_t hashFuncCRC32(char *str, size_t size) {
        .           
   80,000 ( 0.01%)      assert(str);
        .           
  120,000 ( 0.01%)      uint32_t crc32 = 0xFFFFFFFF;
  808,872 ( 0.08%)      for (size_t i = 0; str[i] != '\0'; i++) {
1,033,308 ( 0.10%)  		crc32 = (crc32 >> 8) ^ CRC32Table[(crc32 ^ (uint32_t) str[i]) & 0xff];
        .               }
        .           
  160,000 ( 0.02%)      return ~crc32 % size;
   80,000 ( 0.01%)  }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./libio/./libio/genops.c
  ./libio/./libio/strops.c
  ./stdio-common/./stdio-common/vfscanf-internal.c
  ./string/../sysdeps/x86_64/multiarch/../rawmemchr.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-sse2-unaligned.S

--------------------------------------------------------------------------------
Ir                 
--------------------------------------------------------------------------------
5,085,488 ( 0.49%)  events annotated

